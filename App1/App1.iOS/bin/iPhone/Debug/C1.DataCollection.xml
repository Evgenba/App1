<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.DataCollection</name>
    </assembly>
    <members>
        <member name="T:C1.DataCollection.C1CacheDataCollection`1">
            <summary>
            Collection that takes another source and cache the items.
            </summary>
            <remarks>The creation of the items will be delayed until they are accessed. This way the memory and processor usage is optimized.</remarks>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:C1.DataCollection.C1CacheDataCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1CacheDataCollection`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="E:C1.DataCollection.C1CacheDataCollection`1.CollectionChanging">
            <summary>
            Occurs before the collection changes.
            </summary>
        </member>
        <member name="E:C1.DataCollection.C1CacheDataCollection`1.ItemLoaded">
            <summary>
            Occurs when an item is added to the cache.
            </summary>
        </member>
        <member name="E:C1.DataCollection.C1CacheDataCollection`1.ItemUnloaded">
            <summary>
            Occurs when an item is removed from the cache.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1CacheDataCollection`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanging" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:C1.DataCollection.CacheDataCollectionItemEventArgs`1">
            <summary>
            Contains information about an item of the cache.
            </summary>
        </member>
        <member name="M:C1.DataCollection.CacheDataCollectionItemEventArgs`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.CacheDataCollectionItemEventArgs`1"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:C1.DataCollection.CacheDataCollectionItemEventArgs`1.Index">
            <summary>
            Gets the index of the item.
            </summary>
        </member>
        <member name="P:C1.DataCollection.CacheDataCollectionItemEventArgs`1.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="T:C1.DataCollection.C1CursorDataCollection`2">
            <summary>
            Base class for cursor-like collection.
            </summary>
            <remarks>
            This class is appropriate for wrapping data services that return the data in pages and give a token to get the next page, like Facebook, Twitter, YouTube, etc.
            </remarks>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <typeparam name="K">The type of the token.</typeparam>
        </member>
        <member name="P:C1.DataCollection.C1CursorDataCollection`2.InternalList">
            <summary>
            Gets or sets the list that hold the items to be returned in the public api.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.GetPageAsync(System.Int32,`1,System.Nullable{System.Int32},System.Collections.Generic.IReadOnlyList{C1.DataCollection.SortDescription},C1.DataCollection.FilterExpression,System.Threading.CancellationToken)">
            <summary>
            When overriden in an inherited class it returns the items in the page as well as a token to the next page.
            </summary>
            <param name="startingIndex">The index where the returned items will be inserted.</param>
            <param name="pageToken">The token of the requesting page, pass null if no pages had been requested so far.</param>
            <param name="count">The desired number of items to be returned.</param>
            <param name="sortDescriptions">The sort descriptions.</param>
            <param name="filterExpression">The filter expression.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A tuple containing the items and a token to the next page.</returns>
        </member>
        <member name="P:C1.DataCollection.C1CursorDataCollection`2.HasMoreItems">
            <summary>
            Gets a value that indicates whether more items can be loaded.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.LoadMoreItemsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Loads more items.
            </summary>
            <param name="count">Specifies the desired number of items to be loaded.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.CanRefresh">
            <summary>
            Determines whether the collection can be refreshed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.RefreshAsync(System.Threading.CancellationToken)">
            <summary>
            Removes the cached data and loads the whole collection from scratch.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="P:C1.DataCollection.C1CursorDataCollection`2.SortDescriptions">
            <summary>
            Gets the sort descriptions applied to the data.
            </summary>
        </member>
        <member name="E:C1.DataCollection.C1CursorDataCollection`2.SortChanged">
            <summary>
            Raised after a sort operation was performed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.OnSortChanged">
            <summary>
            Called after the sort changed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.CanSort(C1.DataCollection.SortDescription[])">
            <summary>
            Returns whether the collection is able to sort the specified <paramref name="sortDescriptions" />.
            </summary>
            <param name="sortDescriptions">The sort descriptions to be checked whether the collection can be sorted.</param>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.SortAsync(C1.DataCollection.SortDescription[])">
            <summary>
            Sorts the collection according to the specified sort descriptions.
            </summary>
            <param name="sortDescriptions">The sort descriptions that determine how the data will be sort.</param>
        </member>
        <member name="P:C1.DataCollection.C1CursorDataCollection`2.FilterExpression">
            <summary>
            Gets the filter expression applied to the data.
            </summary>
        </member>
        <member name="E:C1.DataCollection.C1CursorDataCollection`2.FilterChanged">
            <summary>
            Raised after a filter operation was performed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.OnFilterChanged">
            <summary>
            Called after the filter changed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.CanFilter(C1.DataCollection.FilterExpression)">
            <summary>
            Returns whether the collection is able to filter the specified <paramref name="filterExpression" />.
            </summary>
            <param name="filterExpression">The filter expression that determine how the data would be filtered.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.FilterAsync(C1.DataCollection.FilterExpression)">
            <summary>
            Filters the data using specified <paramref name="filterExpression"/>.
            </summary>
            <param name="filterExpression">The filter expression applied to the data.</param>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.InsertAsyncOverride(System.Int32,System.Object)">
            <summary>
            This method is called when an item is inserted in the collection.
            </summary>
            <remarks><see cref="M:C1.DataCollection.C1CursorDataCollection`2.CanInsert(System.Int32)"/> must return true to enable this method.</remarks>
            <param name="index">The index where the item is inserted.</param>
            <param name="item">The item inserted.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.RemoveAsyncOverride(System.Int32)">
            <summary>
            This method is called when an item is removed from the collection.
            </summary>
            <remarks><see cref="M:C1.DataCollection.C1CursorDataCollection`2.CanRemove(System.Int32)"/> must return true to enable this method.</remarks>
            <param name="index">The index of the removed item.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.ReplaceAsyncOverride(System.Int32,System.Object)">
            <summary>
            This method is called when an item is replaced in the collection.
            </summary>
            <remarks><see cref="M:C1.DataCollection.C1CursorDataCollection`2.CanReplace(System.Int32)"/> must return true to enable this method.</remarks>
            <param name="index">The index of the replaced item.</param>
            <param name="item">The replaced item.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1CursorDataCollection`2.MoveAsyncOverride(System.Int32,System.Int32)">
            <summary>
            This method is called when an item is moved in the collection.
            </summary>
            <remarks><see cref="M:C1.DataCollection.C1CursorDataCollection`2.CanMove(System.Int32,System.Int32)"/> must return true to enable this method.</remarks>
            <param name="fromIndex">The original index of the item.</param>
            <param name="toIndex">The destination index of the item.</param>
            <returns></returns>
        </member>
        <member name="T:C1.DataCollection.C1CursorDataCollection`1">
            <summary>
            Base class for cursor-like collection.
            </summary>
            <remarks>
            This class is appropriate for wrapping data services that return the data in pages and give a token to get the next page, like Facebook, Twitter, YouTube, etc.
            </remarks>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="T:C1.DataCollection.C1DataCollection`1">
            <summary>
            Implements an in-memory collection which takes a data source and applies the sort and filter operations.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:C1.DataCollection.C1DataCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1DataCollection`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:C1.DataCollection.C1DataCollection`1.UseCPUsInParallel">
            <summary>
            Gets or sets whether the operations will be performed using CPU's in parallel.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DataCollection`1.AsPlain">
            <summary>
            Returns a <see cref="T:C1.DataCollection.IDataCollection`1"/> whose group items are inline with the data items. Otherwise the collection return the first level of groups and its items must be get from each of the group items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.DataCollection.C1DataCollectionBase`1">
            <summary>
            Base class for data collections.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1DataCollectionBase`1"/> class.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionBase`1.GetItemType">
            <summary>
            Gets the type of the item.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1DataCollectionBase`1.InternalList">
            <summary>
            Gets or sets the list that hold the items to be returned in the public api.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1DataCollectionBase`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in the read-only list.
            </summary>
            <param name="index">The index.</param>
            <returns>The item at the specified position.</returns>
        </member>
        <member name="P:C1.DataCollection.C1DataCollectionBase`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="E:C1.DataCollection.C1DataCollectionBase`1.CollectionChanged">
            <summary>
            Occurs after the collection changed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionBase`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified item.
            </summary>
            <param name="item">The item to look for.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionBase`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:C1.DataCollection.C1DataCollectionBase`1.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:C1.DataCollection.C1DataCollectionBase`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionBase`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:C1.DataCollection.C1DataCollectionList`1">
            <summary>
            Data collection wrapper for exposing it as a <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.#ctor(C1.DataCollection.IDataCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1DataCollectionList`1" /> class.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1DataCollectionList`1.DataCollection">
            <summary>
            Gets the data collection this list is wrapping.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.SetSource(C1.DataCollection.IDataCollection{`0})">
            <summary>
            Sets the data collection that this list wraps.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="P:C1.DataCollection.C1DataCollectionList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1DataCollectionList`1.IsFixedSize">
            <summary>
            Gets whether the collection size can change.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1DataCollectionList`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1DataCollectionList`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1DataCollectionList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1DataCollectionList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:C1.DataCollection.C1DataCollectionList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</returns>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item">item</paramref> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item">item</paramref> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item">item</paramref> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>true if the System.Object is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.</returns>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the <paramref name="from"/> position to <paramref name="to"/>.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items.
            </summary>
            <param name="items">The inserted items.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a range of items in the collection.
            </summary>
            <param name="startingIndex">The index where the items are inserted.</param>
            <param name="items">The inserted items.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items.
            </summary>
            <param name="startingIndex">The index from where the items are removed.</param>
            <param name="count">The number of rows that will be removed.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.ReplaceRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces a range of items.
            </summary>
            <param name="startingIndex">The index from where the items are replaced.</param>
            <param name="items">The items replacements.</param>
        </member>
        <member name="E:C1.DataCollection.C1DataCollectionList`1.CollectionChanged">
            <summary>
            Occurs after the items in the collection changed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:C1.DataCollection.C1DelegateList`1">
            <summary>
            Exposes an IList created dynamically by specifying a count and a selector which provide the items
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DelegateList`1.#ctor(System.Int32,System.Func{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1DelegateList`1"/> class.
            </summary>
            <param name="count">The number of items.</param>
            <param name="select">The select function used to get the items.</param>
        </member>
        <member name="M:C1.DataCollection.C1DelegateList`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1DelegateList`1"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:C1.DataCollection.C1DelegateList`1.#ctor(System.Func{System.Int32},System.Func{System.Int32,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1DelegateList`1"/> class.
            </summary>
            <param name="getCount">Function that returns the number of items.</param>
            <param name="select">The select function used to get the items.</param>
        </member>
        <member name="T:C1.DataCollection.C1EditableDataCollection`1">
            <summary>
            Collection which allows performing changes locally until they are committed to the inner source.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:C1.DataCollection.C1EditableDataCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1EditableDataCollection`1"/> class.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1EditableDataCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1EditableDataCollection`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:C1.DataCollection.C1EditableDataCollection`1.CommitChangesAsync">
            <summary>
            Commits the local changes to the source.
            </summary>
        </member>
        <member name="T:C1.DataCollection.C1FilterDataCollection`1">
            <summary>
            Collection which supports filtering.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:C1.DataCollection.C1FilterDataCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1FilterDataCollection`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:C1.DataCollection.C1FilterDataCollection`1.UseCPUsInParallel">
            <summary>
            Gets or sets a value indicating whether the operations will be performed using parallels CPU's.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1FilterDataCollection`1.IsThreadSafe">
            <summary>
            Gets or sets a value indicating whether the filter predicate will be executed in the same thread as the call.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1FilterDataCollection`1.InternalList">
            <summary>
            Gets or sets the list that hold the items to be returned in the public api.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1FilterDataCollection`1.CanFilter(C1.DataCollection.FilterExpression)">
            <summary>
            Returns whether the collection is able to filter the specified expression.
            </summary>
            <param name="filterExpression">The filter expression that determine how the data would be filtered.</param>
        </member>
        <member name="P:C1.DataCollection.C1FilterDataCollection`1.FilterExpression">
            <summary>
            Gets the filter expression applied to the data.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1FilterDataCollection`1.FilterAsync(C1.DataCollection.FilterExpression)">
            <summary>
            Filters the data using specified filter expression.
            </summary>
            <param name="filterExpression">The filter expression applied to the data.</param>
        </member>
        <member name="M:C1.DataCollection.C1FilterDataCollection`1.OnSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the source collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:C1.DataCollection.C1FilterDataCollection`1.GetPatternFromFilterOperation(C1.DataCollection.FilterOperation,System.String)">
            <summary>
            Get Regex Pattern string that depend on filter operation : Contains, StartsWith, EndsWith.
            </summary>
            <param name="operation">Filter operation that we want to get suitable pattern for.</param>
            <param name="query">The query for searching in pattern.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1FilterDataCollection`1.InsertAsync(System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the specified index in the collection.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="item">The item to be inserted.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1FilterDataCollection`1.RemoveAsync(System.Int32)">
            <summary>
            Removes the item at the specified index from the collection.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1FilterDataCollection`1.ReplaceAsync(System.Int32,System.Object)">
            <summary>
            Replaces the item at the specified index by the new specified item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1FilterDataCollection`1.MoveAsync(System.Int32,System.Int32)">
            <summary>
            Moves an item from the specified position to the new one.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <returns></returns>
        </member>
        <member name="T:C1.DataCollection.C1GroupDataCollection`1">
            <summary>
            Collection which supports grouping
            </summary>
            <typeparam name="S">The type of the items in the source collection</typeparam>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1GroupDataCollection`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="isPlain">if set to <c>true</c> the groups will be inline with the items, otherwise the first level will contain groups and the items will be inside each group.</param>
        </member>
        <member name="P:C1.DataCollection.C1GroupDataCollection`1.UseCPUsInParallel">
            <summary>
            Gets or sets a value indicating whether the operations will be performed using parallels CPU's.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1GroupDataCollection`1.InternalList">
            <summary>
            Gets or sets the list that hold the items to be returned in the public api.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1GroupDataCollection`1.IsPlain">
            <summary>
            Gets whether the group items will be inline with the data items or the items will be the first level of group items.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.CanGroup(C1.DataCollection.GroupDescription[])">
            <summary>
            Returns whether the collection is able to group the specified group descriptions.
            </summary>
            <param name="groupDescriptions">The group descriptions that determine how the data would be grouped.</param>
        </member>
        <member name="P:C1.DataCollection.C1GroupDataCollection`1.GroupDescriptions">
            <summary>
            Gets the group descriptions applied to the data.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.GroupAsync(C1.DataCollection.GroupDescription[])">
            <summary>
            Groups the collection according to the specified group descriptions.
            </summary>
            <param name="groupDescriptions">The group descriptions that determine how the data will be grouped.</param>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.CreateInternalList(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates the internal list from the source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.OnSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the source collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.InsertAsync(System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the specified index in the collection.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="addedItem">The item to be inserted.</param>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.CanRemove(System.Int32)">
            <summary>
            Determines whether the item at the specified index can be removed from the collection.
            </summary>
            <param name="index">The index of the item that would be removed.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.RemoveAsync(System.Int32)">
            <summary>
            Removes the item at the specified index from the collection.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.CanReplace(System.Int32)">
            <summary>
            Determines whether the item at the specified index can be replaced in the collection.
            </summary>
            <param name="index">The index of the item that would be replaced.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.ReplaceAsync(System.Int32,System.Object)">
            <summary>
            Replaces the item at the specified index by the new specified item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.CanMove(System.Int32,System.Int32)">
            <summary>
            Determines whether the item at fromIndex can be moved to toIndex.
            </summary>
            <param name="fromIndex">The original index.</param>
            <param name="toIndex">The destination index.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1GroupDataCollection`1.MoveAsync(System.Int32,System.Int32)">
            <summary>
            Moves an item from the specified position to the new one.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <returns></returns>
        </member>
        <member name="T:C1.DataCollection.GroupItem`2">
            <summary>
            Represent an item that is a group.
            </summary>
            <typeparam name="K">The type of the key</typeparam>
            <typeparam name="S">The type of the items of the data collection to which this group belongs to.</typeparam>
        </member>
        <member name="M:C1.DataCollection.GroupItem`2.#ctor(C1.DataCollection.IDataCollection{System.Object},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.GroupItem`2"/> class.
            </summary>
            <param name="parent">The parent collection which this group belongs to.</param>
            <param name="key">The key.</param>
        </member>
        <member name="P:C1.DataCollection.GroupItem`2.Group">
            <summary>
            Gets the key of the group.
            </summary>
        </member>
        <member name="P:C1.DataCollection.GroupItem`2.Level">
            <summary>
            Gets the nesting level of this group.
            </summary>
        </member>
        <member name="M:C1.DataCollection.GroupItem`2.GetItemType">
            <summary>
            Gets the type of the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.GroupItem`2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:C1.DataCollection.C1HierarchicalDataCollection`1">
            <summary>
            Base class of collections that are composed by others <see cref="P:C1.DataCollection.C1HierarchicalDataCollection`1.InternalCollections"/>.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="P:C1.DataCollection.C1HierarchicalDataCollection`1.InternalCollections">
            <summary>
            Gets the collections that feed this collection.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1HierarchicalDataCollection`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:C1.DataCollection.C1HierarchicalDataCollection`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.GetItemType">
            <summary>
            Gets the type of the item.
            </summary>
            <returns></returns>
        </member>
        <member name="E:C1.DataCollection.C1HierarchicalDataCollection`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.LoadAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Load the items between the specified indexes.
            </summary>
            <param name="fromIndex">The starting index, if not specified this will be 0.</param>
            <param name="toIndex">The starting index, if not specified this will be Count.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.GetLoadedItems">
            <summary>
            Returns all the items that has been loaded so far.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.DataCollection.C1HierarchicalDataCollection`1.HasMoreItems">
            <summary>
            Gets a value that indicates whether more items can be loaded.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.LoadMoreItemsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Loads more items.
            </summary>
            <param name="count">Specifies the desired number of items to be loaded.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="E:C1.DataCollection.C1HierarchicalDataCollection`1.SortChanged">
            <summary>
            Raised after a sort operation was performed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.OnSortChanged">
            <summary>
            Called when sort changed.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1HierarchicalDataCollection`1.SortDescriptions">
            <summary>
            Gets the sort descriptions applied to the data.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.CanSort(C1.DataCollection.SortDescription[])">
            <summary>
            Returns whether the collection is able to sort the specified <paramref name="sortDescriptions" />.
            </summary>
            <param name="sortDescriptions">The sort descriptions to be checked whether the collection can be sorted.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.SortAsync(C1.DataCollection.SortDescription[])">
            <summary>
            Sorts the collection according to the specified <paramref name="sortDescriptions" />.
            </summary>
            <param name="sortDescriptions">The sort descriptions that determine how the data will be sort.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.CanInsert(System.Int32)">
            <summary>
            Determines whether a new item can be inserted in the collection at the specified <paramref name="index" />.
            </summary>
            <param name="index">The index where the items would be inserted.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.CanRemove(System.Int32)">
            <summary>
            Determines whether the item at the specified <paramref name="index" /> can be removed from the collection.
            </summary>
            <param name="index">The index of the item that would be removed.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.CanReplace(System.Int32)">
            <summary>
            Determines whether the item at the specified <paramref name="index" /> can be replaced in the collection.
            </summary>
            <param name="index">The index of the item that would be replaced.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.CanMove(System.Int32,System.Int32)">
            <summary>
            Determines whether the item at <paramref name="fromIndex" /> can be moved to <paramref name="toIndex" />.
            </summary>
            <param name="fromIndex">The original index.</param>
            <param name="toIndex">The destination index.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.InsertAsync(System.Int32,System.Object)">
            <summary>
            Inserts the specified <paramref name="item" /> at the specified <paramref name="index" /> in the collection.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="item">The item to be inserted.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.RemoveAsync(System.Int32)">
            <summary>
            Removes the item at the specified <paramref name="index" /> from the collection.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.ReplaceAsync(System.Int32,System.Object)">
            <summary>
            Replaces the item at the specified <paramref name="index" /> by the specified <paramref name="item" />.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.MoveAsync(System.Int32,System.Int32)">
            <summary>
            Moves an item from the specified <paramref name="fromIndex" /> to <paramref name="toIndex" />.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1HierarchicalDataCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:C1.DataCollection.C1PagedDataCollection`1">
            <summary>
            Collection that wraps another collection to be shown in pages of a maximum number of items.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1PagedDataCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1PagedDataCollection`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:C1.DataCollection.C1PagedDataCollection`1.CurrentPage">
            <summary>
            Gets the current page number.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1PagedDataCollection`1.PageSize">
            <summary>
            Gets or sets the maximum number of items per page.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1PagedDataCollection`1.TotalCount">
            <summary>
            Gets the total number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1PagedDataCollection`1.PagesCount">
            <summary>
            Gets the total number of pages in the collection.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1PagedDataCollection`1.MoveToPageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Moves to the page <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">The index of the page.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:C1.DataCollection.C1ScopedDataCollection`1">
            <summary>
            Wrap collection that is constrained to get and modify a specific property of the data items without affecting the rest of the properties.
            </summary>
            <remarks> This collection can perform group, filter and sort over the specified property path, without affecting the operations applied to the underlying collection that are not related to the scoped property.
            </remarks>
        </member>
        <member name="M:C1.DataCollection.C1ScopedDataCollection`1.#ctor(System.Collections.IEnumerable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1ScopedDataCollection`1" /> class.
            </summary>
            <param name="source">The original source.</param>
            <param name="propertyPath">The property path to which this collection is scoped.</param>
        </member>
        <member name="P:C1.DataCollection.C1ScopedDataCollection`1.PropertyPath">
            <summary>
            Gets or sets the property path to which this collection is scoped.
            </summary>
        </member>
        <member name="T:C1.DataCollection.ScopedFilterExpressionEx">
            <summary>
            Set of extension methods to work with scoped filter expressions
            </summary>
        </member>
        <member name="M:C1.DataCollection.ScopedFilterExpressionEx.ReplaceExpressionInScope(C1.DataCollection.FilterExpression,System.String,C1.DataCollection.FilterExpression)">
            <summary>
            Replaces the expression in the specified <paramref name="scope"/> by the <paramref name="newExpression"/>.
            </summary>
            <param name="expression">The original expression.</param>
            <param name="scope">The property path used to determine the part of the original expression that will be replaced.</param>
            <param name="newExpression">The new expression that will replace a part of the original one.</param>
        </member>
        <member name="M:C1.DataCollection.ScopedFilterExpressionEx.RemoveExpressionInScope(C1.DataCollection.FilterExpression,System.String)">
            <summary>
            Removes the expression in the specified <paramref name="scope"/>.
            </summary>
            <param name="expression">The original expression.</param>
            <param name="scope">The property path used to determine the part of the original expression that will be removed.</param>
        </member>
        <member name="M:C1.DataCollection.ScopedFilterExpressionEx.GetExpresssionInScope(C1.DataCollection.FilterExpression,System.String)">
            <summary>
            Gets the expression corresponding to the specified <paramref name="scope"/>.
            </summary>
            <param name="expression">The original expression.</param>
            <param name="scope">the property path used to scope the expression.</param>
        </member>
        <member name="M:C1.DataCollection.ScopedFilterExpressionEx.IsExpresssionInScope(C1.DataCollection.FilterExpression,System.String)">
            <summary>
            Gets whether the <paramref name="expression"/> belongs to the specified <paramref name="scope"/>.
            </summary>
            <param name="expression">The original expression.</param>
            <param name="scope">Property path used to check the expression belongs to.</param>
        </member>
        <member name="M:C1.DataCollection.ScopedFilterExpressionEx.ContainsScope(C1.DataCollection.FilterExpression,System.String)">
            <summary>
            Gets whether the <paramref name="scope"/> is in any part of the <paramref name="expression"/>.
            </summary>
            <param name="expression">The original expression.</param>
            <param name="scope">Property path used to check the expression contains it.</param>
        </member>
        <member name="T:C1.DataCollection.C1SelectDataCollection`2">
            <summary>
            Collection which allows transforming the items through a select clause.
            </summary>
            <typeparam name="S">The type of the items in the source collection.</typeparam>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:C1.DataCollection.C1SelectDataCollection`2.#ctor(System.Collections.IEnumerable,System.Func{System.Int32,`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1SelectDataCollection`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="select">Select function which converts a source item into an item of this collection.</param>
        </member>
        <member name="M:C1.DataCollection.C1SelectDataCollection`2.LoadAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Load the items between the specified indexes.
            </summary>
            <param name="fromIndex">The starting index, if not specified this will be 0.</param>
            <param name="toIndex">The starting index, if not specified this will be Count.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1SelectDataCollection`2.GetLoadedItems">
            <summary>
            Returns the items that has be loaded so far.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.DataCollection.C1SelectManyDataCollection`2">
            <summary>
            Collection which allows transforming the items through a select many clause.
            </summary>
            <typeparam name="S">The type of the items in the source collection.</typeparam>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:C1.DataCollection.C1SelectManyDataCollection`2.#ctor(System.Collections.IEnumerable,System.Func{System.Int32,`0,System.Collections.Generic.IReadOnlyList{`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1SelectManyDataCollection`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="selectMany">Select many function which converts a source item into an item of this collection.</param>
        </member>
        <member name="T:C1.DataCollection.C1SequenceDataCollection`1">
            <summary>
            Collection that is composed of a sequence of other <see cref="P:C1.DataCollection.C1SequenceDataCollection`1.Collections"/>.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:C1.DataCollection.C1SequenceDataCollection`1.#ctor(System.Collections.Generic.IEnumerable{C1.DataCollection.IDataCollection{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1SequenceDataCollection`1"/> class.
            </summary>
            <param name="collections">A collection of data-collections that will appear as a single collection one after the other.</param>
        </member>
        <member name="P:C1.DataCollection.C1SequenceDataCollection`1.Collections">
            <summary>
            Gets the collections that feed this collection.
            </summary>
        </member>
        <member name="T:C1.DataCollection.C1SortDataCollection`1">
            <summary>
            Collection which supports sorting.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:C1.DataCollection.C1SortDataCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1SortDataCollection`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:C1.DataCollection.C1SortDataCollection`1.UseCPUsInParallel">
            <summary>
            Gets or sets a value indicating whether the operations will be performed using parallels CPU's.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1SortDataCollection`1.InternalList">
            <summary>
            Gets or sets the list that hold the items to be returned in the public api.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1SortDataCollection`1.CanSort(C1.DataCollection.SortDescription[])">
            <summary>
            Returns whether the collection is able to sort the specified sort descriptions.
            </summary>
            <param name="sortDescriptions">The sort descriptions to be checked whether the collection can be sorted.</param>
            <returns></returns>
        </member>
        <member name="P:C1.DataCollection.C1SortDataCollection`1.SortDescriptions">
            <summary>
            Gets the sort descriptions applied to the data.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1SortDataCollection`1.SortAsync(C1.DataCollection.SortDescription[])">
            <summary>
            Sorts the collection according to the specified sort descriptions.
            </summary>
            <param name="sortDescriptions">The sort descriptions that determine how the data will be sort.</param>
        </member>
        <member name="M:C1.DataCollection.C1SortDataCollection`1.OnSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the source collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:C1.DataCollection.C1SortDataCollection`1.InsertAsync(System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the specified index in the collection.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="addedItem">The item to be inserted.</param>
        </member>
        <member name="M:C1.DataCollection.C1SortDataCollection`1.RemoveAsync(System.Int32)">
            <summary>
            Removes the item at the specified index from the collection.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:C1.DataCollection.C1SortDataCollection`1.ReplaceAsync(System.Int32,System.Object)">
            <summary>
            Replaces the item at the specified index by the new specified item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:C1.DataCollection.C1SortDataCollection`1.CanMove(System.Int32,System.Int32)">
            <summary>
            Determines whether the item at fromIndex can be moved to toIndex.
            </summary>
            <param name="fromIndex">The original index.</param>
            <param name="toIndex">The destination index.</param>
        </member>
        <member name="M:C1.DataCollection.C1SortDataCollection`1.MoveAsync(System.Int32,System.Int32)">
            <summary>
            Moves an item from the specified position to the new one.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
        </member>
        <member name="T:C1.DataCollection.C1SpanDataCollection`1">
            <summary>
            This collection is a portion of another collection.
            </summary>
            <remarks>The bounds of the collection are specified through the method <see cref="M:Slice(int, int)"/>.</remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:C1.DataCollection.C1SpanDataCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1SpanDataCollection`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:C1.DataCollection.C1SpanDataCollection`1.Start">
            <summary>
            Gets the index in the underlying collection where this collection starts.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1SpanDataCollection`1.Length">
            <summary>
            Gets the maximum number of items that can be in the collection.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1SpanDataCollection`1.Slice(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Specifies the bounds of the collection.
            </summary>
            <param name="start">The index in the underlying collection where this collection starts.</param>
            <param name="length">The maximum number of items that will be in this collection. If not specified will continue to the end of the inner collection.</param>
        </member>
        <member name="P:C1.DataCollection.C1SpanDataCollection`1.Count">
            <summary>
            Gets the number of items in this collection.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1SpanDataCollection`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified position.
            </summary>
            <param name="index">The position of the requested item.</param>
        </member>
        <member name="P:C1.DataCollection.C1SpanDataCollection`1.TotalCount">
            <summary>
            Gets the total count of items in the underlying collection.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1SpanDataCollection`1.OnSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the source collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:C1.DataCollection.C1VirtualDataCollection`1">
            <summary>
            Base class for data-virtualized collections.
            </summary>
            <remarks>
            Override <see cref="M:GetPageAsync"/> to provide the data.
            </remarks>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.#ctor(System.Int32,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1VirtualDataCollection`1"/> class.
            </summary>
            <param name="maxParallelRequests">The maximum number of pages that will be requested concurrently. If 1 is specified, the pages will be fetched one after the other. Avoid setting a big number to prevent saturating the server with too many requests.</param>
            <param name="maxActiveRequests">The maximum number of pages that will be executing, or waiting. When this number is surpassed the oldest requested pages will be cancelled. The value of this parameter must be greater than <paramref name="maxParallelRequests"/>.</param>
            <param name="requestDelay">The delay before requesting a page. When this parameter is greater than zero, it helps avoid bursts of page requests, typically caused by scrolling down operations.</param>
        </member>
        <member name="P:C1.DataCollection.C1VirtualDataCollection`1.InternalList">
            <summary>
            Gets or sets the list that hold the items to be returned in the public api.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1VirtualDataCollection`1.PageSize">
            <summary>
            Gets or sets the number of items that will be fetch per page.
            </summary>
            <remarks>This property must be greater than zero.</remarks>
        </member>
        <member name="P:C1.DataCollection.C1VirtualDataCollection`1.Mode">
            <summary>
            Gets or sets the way the items will be loaded
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.GetPageAsync(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IReadOnlyList{C1.DataCollection.SortDescription},C1.DataCollection.FilterExpression,System.Threading.CancellationToken)">
            <summary>
            When overridden in an inherited class it returns the items in the page as well as a token to the next page.
            </summary>
            <param name="pageIndex">The index of the requesting page.</param>
            <param name="startingIndex">The index where the returned items will be inserted.</param>
            <param name="count">The number of items to be returned.</param>
            <param name="sortDescriptions">The sort descriptions.</param>
            <param name="filterExpression">The filter expression.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A tuple containing the items and a total number of items.</returns>
        </member>
        <member name="P:C1.DataCollection.C1VirtualDataCollection`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1VirtualDataCollection`1.IsLoading">
            <summary>
            Gets whether the collection is getting the data.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1VirtualDataCollection`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in the read-only list.
            </summary>
            <param name="index">The index.</param>
            <returns>The item at the specified position.</returns>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.CanRefresh">
            <summary>
            Determines whether the collection can be refreshed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.RefreshAsync(System.Threading.CancellationToken)">
            <summary>
            Removes the cached data and loads the whole collection from scratch.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.LoadAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Loads all the items between the specified range.
            </summary>
            <param name="fromIndex">The starting index, if not specified this will be 0.</param>
            <param name="toIndex">The starting index, if not specified this will be Count.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.GetLoadedItems">
            <summary>
            Returns all the items that has be loaded so far.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1VirtualDataCollection`1.SortDescriptions">
            <summary>
            Gets the sort descriptions applied to the data.
            </summary>
        </member>
        <member name="E:C1.DataCollection.C1VirtualDataCollection`1.SortChanged">
            <summary>
            Raised after a sort operation was performed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.OnSortChanged">
            <summary>
            Called after the sort changed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.CanSort(C1.DataCollection.SortDescription[])">
            <summary>
            Returns whether the collection is able to sort the specified <paramref name="sortDescriptions" />.
            </summary>
            <param name="sortDescriptions">The sort descriptions to be checked whether the collection can be sorted.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.SortAsync(C1.DataCollection.SortDescription[])">
            <summary>
            Sorts the collection according to the specified sort descriptions.
            </summary>
            <param name="sortDescriptions">The sort descriptions that determine how the data will be sort.</param>
        </member>
        <member name="P:C1.DataCollection.C1VirtualDataCollection`1.FilterExpression">
            <summary>
            Gets the filter expression applied to the data.
            </summary>
        </member>
        <member name="E:C1.DataCollection.C1VirtualDataCollection`1.FilterChanged">
            <summary>
            Raised after a filter operation was performed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.OnFilterChanged">
            <summary>
            Called after the filter changed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.CanFilter(C1.DataCollection.FilterExpression)">
            <summary>
            Returns whether the collection is able to filter the specified <paramref name="filterExpression" />.
            </summary>
            <param name="filterExpression">The filter expression that determine how the data would be filtered.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.FilterAsync(C1.DataCollection.FilterExpression)">
            <summary>
            Filters the data using specified <paramref name="filterExpression"/>.
            </summary>
            <param name="filterExpression">The filter expression applied to the data.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.CanInsert(System.Int32)">
            <summary>
            Determines whether a new item can be inserted in the collection at the specified <paramref name="index" />.
            </summary>
            <param name="index">The index where the items would be inserted.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.CanRemove(System.Int32)">
            <summary>
            Determines whether the item at the specified <paramref name="index" /> can be removed from the collection.
            </summary>
            <param name="index">The index of the item that would be removed.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.CanReplace(System.Int32)">
            <summary>
            Determines whether the item at the specified <paramref name="index" /> can be replaced in the collection.
            </summary>
            <param name="index">The index of the item that would be replaced.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.CanMove(System.Int32,System.Int32)">
            <summary>
            Determines whether the item at <paramref name="fromIndex" /> can be moved to <paramref name="toIndex" />.
            </summary>
            <param name="fromIndex">The original index.</param>
            <param name="toIndex">The destination index.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.InsertAsync(System.Int32,System.Object)">
            <summary>
            Inserts the specified <paramref name="item" /> at the specified <paramref name="index" /> in the collection.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.RemoveAsync(System.Int32)">
            <summary>
            Removes the item at the specified <paramref name="index" /> from the collection.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.ReplaceAsync(System.Int32,System.Object)">
            <summary>
            Replaces the item at the specified <paramref name="index" /> by the specified <paramref name="item" />.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.MoveAsync(System.Int32,System.Int32)">
            <summary>
            Moves an item from the specified <paramref name="fromIndex" /> to <paramref name="toIndex" />.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.InsertAsyncOverride(System.Int32,System.Object)">
            <summary>
            This method is called when an item is inserted in the collection.
            </summary>
            <remarks><see cref="M:C1.DataCollection.C1VirtualDataCollection`1.CanInsert(System.Int32)"/> must return true to enable this method.</remarks>
            <param name="index">The index where the item is inserted.</param>
            <param name="item">The item inserted.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.RemoveAsyncOverride(System.Int32)">
            <summary>
            This method is called when an item is removed from the collection.
            </summary>
            <remarks><see cref="M:C1.DataCollection.C1VirtualDataCollection`1.CanRemove(System.Int32)"/> must return true to enable this method.</remarks>
            <param name="index">The index of the removed item.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.ReplaceAsyncOverride(System.Int32,System.Object)">
            <summary>
            This method is called when an item is replaced in the collection.
            </summary>
            <remarks><see cref="M:C1.DataCollection.C1VirtualDataCollection`1.CanReplace(System.Int32)"/> must return true to enable this method.</remarks>
            <param name="index">The index of the replaced item.</param>
            <param name="item">The replaced item.</param>
        </member>
        <member name="M:C1.DataCollection.C1VirtualDataCollection`1.MoveAsyncOverride(System.Int32,System.Int32)">
            <summary>
            This method is called when an item is moved in the collection.
            </summary>
            <remarks><see cref="M:C1.DataCollection.C1VirtualDataCollection`1.CanMove(System.Int32,System.Int32)"/> must return true to enable this method.</remarks>
            <param name="fromIndex">The original index of the item.</param>
            <param name="toIndex">The destination index of the item.</param>
        </member>
        <member name="T:C1.DataCollection.VirtualDataCollectionMode">
            <summary>
            Specifies the different modes the data can be loaded.
            </summary>
        </member>
        <member name="F:C1.DataCollection.VirtualDataCollectionMode.Automatic">
            <summary>
            The pages will be requested as the items are accessed.
            </summary>
        </member>
        <member name="F:C1.DataCollection.VirtualDataCollectionMode.Manual">
            <summary>
            The pages will be loaded when they are requested through the LoadAsync method of <see cref="T:C1.DataCollection.C1VirtualDataCollection`1"/>.
            </summary>
        </member>
        <member name="T:C1.DataCollection.C1WrapDataCollection`2">
            <summary>
            Collection which takes another collection as source.
            </summary>
            <typeparam name="S">The type of the items in the source collection.</typeparam>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1WrapDataCollection`2"/> class.
            </summary>
            <remarks>Use <see cref="P:C1.DataCollection.C1WrapDataCollection`2.Source"/> property to set the collection source.</remarks>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1WrapDataCollection`2"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.C1#DataCollection#ISupportSource#Source">
            <summary>
            Gets the data source of this collection.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.Source">
            <summary>
            Gets or sets the original source collection.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.SourceIsList">
            <summary>
            Gets a value indicating whether the source collection is a list.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.SourceIsObservableCollection">
            <summary>
            Gets a value indicating whether the source collection is an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.SourceNotifiesChanges">
            <summary>
            Gets a value indicating whether the source collection notifies changes.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.SuppressSourceNotifications">
            <summary>
            Disables the notifications while the returned IDisposable is not disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.CreateInternalList(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates the internal list from the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.GetItemType">
            <summary>
            Get the type of the items in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.CanSort(C1.DataCollection.SortDescription[])">
            <summary>
            Returns whether the collection is able to sort the specified sort descriptions.
            </summary>
            <param name="sortDescriptions">The sort descriptions to be checked whether the collection can be sorted.</param>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.SortDescriptions">
            <summary>
            Gets the sort descriptions applied to the data.
            </summary>
        </member>
        <member name="E:C1.DataCollection.C1WrapDataCollection`2.SortChanged">
            <summary>
            Raised after a sort operation was performed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.OnSortChanged">
            <summary>
            Called after the sort changed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.SortAsync(C1.DataCollection.SortDescription[])">
            <summary>
            Sorts the collection according to the specified sort descriptions.
            </summary>
            <param name="sortDescriptions">The sort descriptions that determine how the data will be sort.</param>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.CanFilter(C1.DataCollection.FilterExpression)">
            <summary>
            Returns whether the collection is able to filter the specified expression.
            </summary>
            <param name="filterExpression">The filter expression that determine how the data would be filtered.</param>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.FilterExpression">
            <summary>
            Gets the filter expression applied to the data.
            </summary>
        </member>
        <member name="E:C1.DataCollection.C1WrapDataCollection`2.FilterChanged">
            <summary>
            Raised after a filter operation was performed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.OnFilterChanged">
            <summary>
            Called after the filter changed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.FilterAsync(C1.DataCollection.FilterExpression)">
            <summary>
            Filters the data using specified filter expression.
            </summary>
            <param name="filterExpression">The filter expression applied to the data.</param>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.CanGroup(C1.DataCollection.GroupDescription[])">
            <summary>
            Returns whether the collection is able to group the specified group descriptions.
            </summary>
            <param name="groupDescriptions">The group descriptions that determine how the data would be grouped.</param>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.IsPlain">
            <summary>
            Gets whether the group items will be inline with the data items or the items will be the first level of group items.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.GroupDescriptions">
            <summary>
            Gets the group descriptions applied to the data.
            </summary>
        </member>
        <member name="E:C1.DataCollection.C1WrapDataCollection`2.GroupChanged">
            <summary>
            Raised after a grouping operation was performed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.OnGroupChanged">
            <summary>
            Called after the groups changed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.GroupAsync(C1.DataCollection.GroupDescription[])">
            <summary>
            Groups the collection according to the specified group descriptions.
            </summary>
            <param name="groupDescriptions">The group descriptions that determine how the data will be grouped.</param>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.IsUpdating">
            <summary>
            Gets a value indicating whether the collection is being updated.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.CanRefresh">
            <summary>
            Determines whether the collection can be refreshed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.RefreshAsync(System.Threading.CancellationToken)">
            <summary>
            Refreshes the collection data.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.LoadAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Load the items between the specified indexes.
            </summary>
            <param name="fromIndex">The starting index, if not specified this will be 0.</param>
            <param name="toIndex">The starting index, if not specified this will be Count.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.GetLoadedItems">
            <summary>
            Returns the items that has be loaded so far.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.HasMoreItems">
            <summary>
            Gets a value indicating whether this collection can load more items.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.LoadMoreItemsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Loads more items asynchronously.
            </summary>
            <param name="count">The desired count of items to be loaded.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.PageSize">
            <summary>
            Gets or sets the maximum number of items per page.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.CurrentPage">
            <summary>
            Gets the current page number.
            </summary>
        </member>
        <member name="P:C1.DataCollection.C1WrapDataCollection`2.TotalCount">
            <summary>
            Gets the total number of items in the collection.
            </summary>
        </member>
        <member name="E:C1.DataCollection.C1WrapDataCollection`2.PageChanged">
            <summary>
            Occurs after the current page changed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.OnPageChanged">
            <summary>
            Raises the <see cref="E:C1.DataCollection.C1WrapDataCollection`2.PageChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.MoveToPageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Moves to the page <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">The index of the page.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.CanInsert(System.Int32)">
            <summary>
            Determines whether a new item can be inserted in the collection at the specified index.
            </summary>
            <param name="index">The index where the items would be inserted.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.CanRemove(System.Int32)">
            <summary>
            Determines whether the item at the specified index can be removed from the collection.
            </summary>
            <param name="index">The index of the item that would be removed.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.CanReplace(System.Int32)">
            <summary>
            Determines whether the item at the specified index can be replaced in the collection.
            </summary>
            <param name="index">The index of the item that would be replaced.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.CanMove(System.Int32,System.Int32)">
            <summary>
            Determines whether the item at fromIndex can be moved to toIndex.
            </summary>
            <param name="fromIndex">The original index.</param>
            <param name="toIndex">The destination index.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.InsertAsync(System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the specified index in the collection.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.RemoveAsync(System.Int32)">
            <summary>
            Removes the item at the specified index from the collection.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.ReplaceAsync(System.Int32,System.Object)">
            <summary>
            Replaces the item at the specified index by the new specified item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.MoveAsync(System.Int32,System.Int32)">
            <summary>
            Moves an item from the specified position to the new one.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.CreateNewItem">
            <summary>
            Creates a new item of the collection.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`2.OnSourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the source collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:C1.DataCollection.C1WrapDataCollection`1">
            <summary>
            Collection which takes another collection as source.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1WrapDataCollection`1"/> class.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.C1WrapDataCollection`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:C1.DataCollection.C1WrapDataCollection`1.CreateInternalList(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates the internal list from the source.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:C1.DataCollection.CancelEventArgs">
            <summary>
            Event data for cancellable events.
            </summary>
        </member>
        <member name="P:C1.DataCollection.CancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.DataCollection.CancelEventArgs"/> is cancelled.
            </summary>
        </member>
        <member name="T:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs">
            <summary>
            Provides event data for collection events as well as support for asynchronously waiting for the event handlers.
            </summary>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.Create(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs
            class that describes a System.Collections.Specialized.NotifyCollectionChangedAction.Reset change.
            </summary>
            <param name="action">The action that caused the event. This must be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</param>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.Create(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs class that describes a multi-item change.
            </summary>
            <param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
            <param name="changedItems">The items that are affected by the change.</param>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.Create(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
            <param name="changedItem">The item that is affected by the change.</param>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.Create(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
            <param name="newItems">The new items that are replacing the original items.</param>
            <param name="oldItems">The original items that are replaced.</param>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.Create(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
            <param name="changedItems">The items affected by the change.</param>
            <param name="startingIndex">The index where the change occurred.</param>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.Create(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
            <param name="changedItem">The item that is affected by the change.</param>
            <param name="index">The index where the change occurred.</param>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.Create(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
            <param name="newItem">The new item that is replacing the original item.</param>
            <param name="oldItem">The original item that is replaced.</param>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.Create(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
            <param name="newItems">The new items that are replacing the original items.</param>
            <param name="oldItems">The original items that are replaced.</param>
            <param name="startingIndex">The index of the first item of the items that are being replaced.</param>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.Create(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
            <param name="changedItems">The items affected by the change.</param>
            <param name="index">The new index for the changed items.</param>
            <param name="oldIndex">The old index for the changed items.</param>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.Create(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
            <param name="changedItem">The item affected by the change.</param>
            <param name="index">The new index for the changed item.</param>
            <param name="oldIndex">The old index for the changed item.</param>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.Create(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
            <param name="newItem">The new item that is replacing the original item.</param>
            <param name="oldItem">The original item that is replaced.</param>
            <param name="index">The index of the item being replaced.</param>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedAsyncEventArgs.GetDeferral">
            <summary>
            Gets the deferral.
            </summary>
            <remarks>
            The event won't finish until all the deferrals call the comlete method.
            </remarks>
        </member>
        <member name="T:C1.DataCollection.NotifyCollectionChangedDeferralsAwaiter">
            <summary>
            Event awaiter which provides the event arguments.
            </summary>
            <seealso cref="T:C1.Core.AsyncEventArgsDeferralsAwaiter" />
        </member>
        <member name="P:C1.DataCollection.NotifyCollectionChangedDeferralsAwaiter.EventArgs">
            <summary>
            Gets the event arguments.
            </summary>
        </member>
        <member name="T:C1.DataCollection.NotifyCollectionChangedEventArgsEx">
            <summary>
            Extension methods for <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/>
            </summary>
        </member>
        <member name="M:C1.DataCollection.NotifyCollectionChangedEventArgsEx.GetDeferral(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Gets a deferral object that allows blocking the object that raised the event asynchronously.
            </summary>
            <param name="args">The event arguments object.</param>
        </member>
        <member name="T:C1.DataCollection.C1DataCollectionEx">
            <summary>
            Extension methods for <see cref="T:C1.DataCollection.C1DataCollection`1"/>.
            </summary>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionEx.SortAsync``1(C1.DataCollection.C1DataCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},C1.DataCollection.SortDirection)">
            <summary>
            Sorts the data collection according to the specified sort path and direction.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="sortPath">The filter path.</param>
            <param name="sortDirection">The sort direction.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionEx.FilterAsync``1(C1.DataCollection.C1DataCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},C1.DataCollection.FilterOperation,System.Object)">
            <summary>
            Filters the data using specified filter parameters.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="filterPath">The path of the data item to which the filter will be applied.</param>
            <param name="filterOperation">The filter operation.</param>
            <param name="value">The value used in the expression.</param>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionEx.GroupAsync``1(C1.DataCollection.C1DataCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Groups the data collection according to the specified group path.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="groupPath">The group path.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.C1DataCollectionEx.IsOneOf(System.Object[],System.Object)">
            <summary>
            Determines whether the specified element is one of the items in the array.
            </summary>
            <param name="array">The array.</param>
            <param name="elem">The element.</param>
        </member>
        <member name="T:C1.DataCollection.IDataCollectionEx">
            <summary>
            Extension methods for <see cref="T:C1.DataCollection.IDataCollection`1"/>.
            </summary>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanSort``1(C1.DataCollection.IDataCollection{``0},System.String)">
            <summary>
            Returns true if the data collection supports sorting.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="sortPath">The path of the data item to which the sort would be applied.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanSort``1(C1.DataCollection.IDataCollection{``0},System.String,C1.DataCollection.SortDirection)">
            <summary>
            Returns true if the data collection supports sorting.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="sortPath">The path of the data item to which the sort would be applied.</param>
            <param name="direction">Whether the sort is ascending or descending.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanSort``1(C1.DataCollection.IDataCollection{``0},C1.DataCollection.SortDescription[])">
            <summary>
            Returns true if the data collection supports sorting.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="sortDescriptions">The sort descriptions that determine how the data would be sort.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GetSortDescriptions``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Returns a list of the current sort descriptions.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.SortAsync``1(C1.DataCollection.IDataCollection{``0},System.String,C1.DataCollection.SortDirection)">
            <summary>
            Sorts the data collection according to the specified sort parameters.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="sortPath">The path of the data item to which the sort description will be applied.</param>
            <param name="sortDirection">The direction of the sort operation.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.SortAsync``1(C1.DataCollection.IDataCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},C1.DataCollection.SortDirection)">
            <summary>
            Sorts the data collection according to the specified sort path and direction.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="sortPath">The filter path.</param>
            <param name="sortDirection">The sort direction.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.SortAsync``1(C1.DataCollection.IDataCollection{``0},C1.DataCollection.SortDescription[])">
            <summary>
            Sorts the data collection according to the specified sort descriptions.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="sortDescriptions">The sort descriptions that determine how the data will be sort.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.AttachSortChanged``1(C1.DataCollection.IDataCollection{``0},System.EventHandler)">
            <summary>
            Attaches the specified handler to the sort changed event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataCollection">The data collection.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.DetachSortChanged``1(C1.DataCollection.IDataCollection{``0},System.EventHandler)">
            <summary>
            Detaches the specified handler from the sort changed event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataCollection">The data collection.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanFilter``1(C1.DataCollection.IDataCollection{``0},C1.DataCollection.FilterExpression)">
            <summary>
            Returns whether the data collection is able to filter the specified expression.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="filterExpression">The filter expression that determine how the data would be filtered.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GetFilterExpression``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Returns a the current filter expression.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.FilterAsync``1(C1.DataCollection.IDataCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},C1.DataCollection.FilterOperation,System.Object)">
            <summary>
            Filters the data using specified filter parameters.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="filterPath">The path of the data item to which the filter will be applied.</param>
            <param name="filterOperation">The filter operation.</param>
            <param name="value">The value used in the expression.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.FilterAsync``1(C1.DataCollection.IDataCollection{``0},System.String,C1.DataCollection.FilterOperation,System.Object)">
            <summary>
            Filters the data using specified filter parameters.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="filterPath">The path of the data item to which the filter will be applied.</param>
            <param name="filterOperation">The filter operation.</param>
            <param name="value">The value used in the expression.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.FilterAsync``1(C1.DataCollection.IDataCollection{``0},System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Filters the data from a query string.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="query">The query string to be filtered.</param>
            <param name="treatSpacesAsAndOperator">if set to <c>true</c> treat spaces as and operator.</param>
            <param name="matchNumbers">if set to <c>true</c> it will look into numeric fields.</param>
            <param name="matchCase">If set to <c>true</c> the case will be taken into account.</param>
            <param name="matchWholeWord">If set to <c>true</c> the whole word will have to be matched.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.FilterAsync``1(C1.DataCollection.IDataCollection{``0},System.Func{System.Object,System.Boolean})">
            <summary>
            Filters the data from a query string.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="predicate">The preicate which will filter the collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.FilterAsync``1(C1.DataCollection.IDataCollection{``0},C1.DataCollection.FilterExpression)">
            <summary>
            Filters the data using specified filter expression.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="filterExpression">The filter expression applied to the data.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GetTextFields``1(C1.DataCollection.IDataCollection{``0},System.Boolean)">
            <summary>
            Gets the text fields of the items of this data collection.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="includeNumbers">if set to <c>true</c> it will return numeric fields.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CreateFilterFromString``1(C1.DataCollection.IDataCollection{``0},System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:C1.DataCollection.FilterExpression"/> from a query string.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="query">The query string to be filtered.</param>
            <param name="treatSpacesAsAndOperator">if set to <c>true</c> treat spaces as and operator.</param>
            <param name="matchNumbers">if set to <c>true</c> it will look into numeric fields.</param>
            <param name="matchCase">If set to <c>true</c> the case will be taken into account.</param>
            <param name="matchWholeWord">If set to <c>true</c> the whole word will have to be matched.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.RemoveFilterAsync``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Removes any filter applied to the collection previously.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.AttachFilterChanged``1(C1.DataCollection.IDataCollection{``0},System.EventHandler)">
            <summary>
            Attaches the specified handler to the filter changed event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataCollection">The data collection.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.DetachFilterChanged``1(C1.DataCollection.IDataCollection{``0},System.EventHandler)">
            <summary>
            Detaches the specified handler from the filter changed event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataCollection">The data collection.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CreatePredicate``1(C1.DataCollection.IDataCollection{``0},C1.DataCollection.FilterExpression)">
            <summary>
            Creates the predicate from the <paramref name="filterExpression"/>.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="filterExpression">The filter expression.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanGroup``1(C1.DataCollection.IDataCollection{``0},System.String)">
            <summary>
            Returns true if the data collection supports sorting.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="groupPath">The path of the data item to which the group would be applied.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanGroup``1(C1.DataCollection.IDataCollection{``0},C1.DataCollection.GroupDescription[])">
            <summary>
            Returns true if the data collection supports sorting.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="groupDescriptions">The group descriptions that determine how the data will be grouped.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GetGroupDescriptions``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Returns a list of the current group descriptions.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GroupAsync``1(C1.DataCollection.IDataCollection{``0},System.String[])">
            <summary>
            Groups the data collection according to the specified group fields.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="fields">The fields.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GroupAsync``1(C1.DataCollection.IDataCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Groups the data collection according to the specified group path.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="groupPath">The group path.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GroupAsync``1(C1.DataCollection.IDataCollection{``0},C1.DataCollection.GroupDescription[])">
            <summary>
            Groups the data collection according to the specified group descriptions.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="groupDescriptions">The group descriptions that determine how the data will be grouped.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.AttachGroupChanged``1(C1.DataCollection.IDataCollection{``0},System.EventHandler)">
            <summary>
            Attaches the specified handler to the group changed event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataCollection">The data collection.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.DetachGroupChanged``1(C1.DataCollection.IDataCollection{``0},System.EventHandler)">
            <summary>
            Detaches the specified handler from the group changed event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataCollection">The data collection.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.IsVirtualizing``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Returns true if the data collection is virtualizing the data.
            </summary>
            <remarks>This is important for data consumers to know whether it is viable to iterate the collection to get all the items.</remarks>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.NeedsLoadAsync``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Returns true if the data collection needs loading the items asynchronously.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.LoadAsync``1(C1.DataCollection.IDataCollection{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Load the items between the specified indexes.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="fromIndex">The starting index, if not specified this will be 0.</param>
            <param name="toIndex">The starting index, if not specified this will be Count.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GetLoadedItems``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Returns all the items that has be loaded so far.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanLoadMoreItems``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Returns true if the data collection can load items on demand.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.LoadMoreItemsAsync``1(C1.DataCollection.IDataCollection{``0},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Loads more items.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="count">Specifies the desired number of items to be loaded.</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanRefresh``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Returns true if the data collection can be refreshed.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.RefreshAsync``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Refreshes the data collection.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.IsPaginated``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Returns true if the data collection is paginated.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GetPageSize``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Gets the maximum number of items per page.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.SetPageSize``1(C1.DataCollection.IDataCollection{``0},System.Int32)">
            <summary>
            Sets the maximum number of items per page.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="pageSize">The size of the page.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GetPagesCount``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Gets the number of pages.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GetCurrentPage``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Gets the current page number.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GetTotalCount``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Gets the total number of items in the collection.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.MoveToPageAsync``1(C1.DataCollection.IDataCollection{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Moves to the page <paramref name="pageIndex"/>.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="pageIndex">The index of the page.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.AttachPageChanged``1(C1.DataCollection.IDataCollection{``0},System.EventHandler)">
            <summary>
            Attaches the specified handler to the page changed event.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.DetachPageChanged``1(C1.DataCollection.IDataCollection{``0},System.EventHandler)">
            <summary>
            Detaches the specified handler to the page changed event.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CreateNewItem``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Creates a new item of the collection.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanInsert``1(C1.DataCollection.IDataCollection{``0},System.Int32)">
            <summary>
            Determines whether a new item can be inserted in the collection at the specified index.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="index">The index where the items would be inserted.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanRemove``1(C1.DataCollection.IDataCollection{``0},System.Int32)">
            <summary>
            Determines whether the item at the specified index can be removed from the collection.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="index">The index of the item that would be removed.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanReplace``1(C1.DataCollection.IDataCollection{``0},System.Int32)">
            <summary>
            Determines whether the item at the specified index can be replaced in the collection.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="index">The index of the item that would be replaced.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.CanMove``1(C1.DataCollection.IDataCollection{``0},System.Int32,System.Int32)">
            <summary>
            Determines whether the item at fromIndex can be moved to toIndex.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="fromIndex">The original index.</param>
            <param name="toIndex">The destination index.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.AddAsync``1(C1.DataCollection.IDataCollection{``0},``0)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.InsertAsync``1(C1.DataCollection.IDataCollection{``0},System.Int32,``0)">
            <summary>
            Inserts the specified item at the specified index in the collection.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="index">The index where the item will be inserted.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.RemoveAsync``1(C1.DataCollection.IDataCollection{``0},System.Int32)">
            <summary>
            Removes the item at the specified index from the collection.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="index">The index of the item that will be removed.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.ReplaceAsync``1(C1.DataCollection.IDataCollection{``0},System.Int32,``0)">
            <summary>
            Replaces the item at the specified index by the specified item.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.MoveAsync``1(C1.DataCollection.IDataCollection{``0},System.Int32,System.Int32)">
            <summary>
            Moves an item from the specified position to the new one.
            </summary>
            <param name="dataCollection">The data collection.</param>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.ToDataCollection``1(System.Collections.IEnumerable)">
            <summary>
            Wraps an <see cref="T:System.Collections.IEnumerable" /> into a data collection.
            </summary>
            <typeparam name="T">The type of the data collection.</typeparam>
            <param name="source">The source of the data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.ToDataCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Wraps an <see cref="T:System.Collections.IEnumerable" /> into a data collection.
            </summary>
            <typeparam name="T">The type of the data collection.</typeparam>
            <param name="source">The source of the data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.AsDataCollection``1(System.Collections.IEnumerable)">
            <summary>
            Wraps an <see cref="T:System.Collections.IEnumerable" /> into a data collection.
            </summary>
            <typeparam name="T">The type of the data collection.</typeparam>
            <param name="source">The source of the data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.AsDataCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Wraps an <see cref="T:System.Collections.IEnumerable" /> into a data collection.
            </summary>
            <typeparam name="T">The type of the data collection.</typeparam>
            <param name="source">The source of the data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.AsList``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Gets a list wrapping this data collection.
            </summary>
            <param name="collection">The original data collection.</param>
        </member>
        <member name="M:C1.DataCollection.IDataCollectionEx.GetSource``1(C1.DataCollection.IDataCollection{``0})">
            <summary>
            Gets the original source of the data.
            </summary>
            <param name="dataCollection">The data collection.</param>
        </member>
        <member name="T:C1.DataCollection.IReadOnlyListEx">
            <summary>
            Extensions for <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
        </member>
        <member name="M:C1.DataCollection.IReadOnlyListEx.IndexOf``1(System.Collections.Generic.IReadOnlyList{``0},``0)">
            <summary>
            Gets the index of the specified item.
            </summary>
            <param name="list">The list.</param>
            <param name="item">The item to look for.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="T:C1.DataCollection.FilterExpression">
            <summary>
            Abstract filter expression. Use <see cref="T:C1.DataCollection.FilterOperationExpression"/> to create a concrete filter operations and <see cref="T:C1.DataCollection.FilterNaryExpression"/> and <see cref="T:C1.DataCollection.FilterNotExpression"/> to apply logical operations between filter expressions.
            </summary>
        </member>
        <member name="M:C1.DataCollection.FilterExpression.Combine(C1.DataCollection.FilterCombination,C1.DataCollection.FilterExpression[])">
            <summary>
            Combines a range of expressions using the specified logical operator.
            </summary>
            <param name="combination">The logical operator.</param>
            <param name="expressions">The expressions to be combined.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:C1.DataCollection.FilterExpression.Combine(C1.DataCollection.FilterCombination,System.Collections.Generic.IEnumerable{C1.DataCollection.FilterExpression})">
            <summary>
            Combines a range of expressions using the specified logical operator.
            </summary>
            <param name="combination">The logical operator.</param>
            <param name="expressions">The expressions to be combined.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="M:C1.DataCollection.FilterExpression.FromString(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:C1.DataCollection.FilterExpression"/> from a string.
            </summary>
            <param name="query">The query to be filtered.</param>
            <param name="fields">The fields taken into account in the filter operation.</param>
            <param name="treatSpacesAsAndOperator">If set to <c>true</c> treat spaces as and operator.</param>
            <param name="matchCase">If set to <c>true</c> the case will be taken into account.</param>
            <param name="matchWholeWord">If set to <c>true</c> the whole word will have to be matched.</param>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.FilterExpression.QueryFromExpression(C1.DataCollection.FilterExpression,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the query back from the expression. If the query can not be determined it returns an empty string.
            </summary>
            <remarks>This method performs the opposite of <see cref="M:C1.DataCollection.FilterExpression.FromString(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Boolean)"/> method.</remarks>
            <param name="expression">The expression to get the query from.</param>
            <param name="fields">The fields applied to the query.</param>
        </member>
        <member name="T:C1.DataCollection.FilterNaryExpression">
            <summary>
            Combines the specified filter expressions using a logical operator.
            </summary>
        </member>
        <member name="M:C1.DataCollection.FilterNaryExpression.#ctor(C1.DataCollection.FilterCombination,C1.DataCollection.FilterExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.FilterNaryExpression"/> class.
            </summary>
            <param name="combination">The logical operator applied between the expressions.</param>
            <param name="expressions">The expressions to combine.</param>
        </member>
        <member name="M:C1.DataCollection.FilterNaryExpression.#ctor(C1.DataCollection.FilterCombination,System.Collections.Generic.IEnumerable{C1.DataCollection.FilterExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.FilterNaryExpression"/> class.
            </summary>
            <param name="combination">The logical operator applied between the expressions.</param>
            <param name="expressions">The expressions to combine.</param>
        </member>
        <member name="P:C1.DataCollection.FilterNaryExpression.FilterCombination">
            <summary>
            Gets the logical operator applied between the expressions.
            </summary>
        </member>
        <member name="P:C1.DataCollection.FilterNaryExpression.Expressions">
            <summary>
            Gets the expressions that are combined.
            </summary>
        </member>
        <member name="M:C1.DataCollection.FilterNaryExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="T:C1.DataCollection.FilterBinaryExpression">
            <summary>
            Combines two filter expressions using a logical operator.
            </summary>
        </member>
        <member name="M:C1.DataCollection.FilterBinaryExpression.#ctor(C1.DataCollection.FilterCombination,C1.DataCollection.FilterExpression,C1.DataCollection.FilterExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.FilterBinaryExpression"/> class.
            </summary>
            <param name="combination">The logical operator applied between the left and right expressions.</param>
            <param name="leftExpression">The left expression.</param>
            <param name="rightExpression">The right expression.</param>
        </member>
        <member name="P:C1.DataCollection.FilterBinaryExpression.LeftExpression">
            <summary>
            Gets the left expression.
            </summary>
        </member>
        <member name="P:C1.DataCollection.FilterBinaryExpression.RightExpression">
            <summary>
            Gets the right expression.
            </summary>
        </member>
        <member name="T:C1.DataCollection.FilterNotExpression">
            <summary>
            Filter expression which negates another expression.
            </summary>
        </member>
        <member name="M:C1.DataCollection.FilterNotExpression.#ctor(C1.DataCollection.FilterExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.FilterNotExpression"/> class.
            </summary>
            <param name="expression">The expression that is negated.</param>
        </member>
        <member name="P:C1.DataCollection.FilterNotExpression.NotExpression">
            <summary>
            Gets the expression that is negated.
            </summary>
        </member>
        <member name="M:C1.DataCollection.FilterNotExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="T:C1.DataCollection.FilterOperationExpression">
            <summary>
            Describes a concrete filter expression.
            </summary>
        </member>
        <member name="P:C1.DataCollection.FilterOperationExpression.FilterPath">
            <summary>
            Path of the data item used get the value to which the expression will be applied.
            </summary>
        </member>
        <member name="P:C1.DataCollection.FilterOperationExpression.FilterOperation">
            <summary>
            The current filter operation: e.g. for a text filter, the
            FilterOperation is one of: 'Contains', 'StartsWith'.
            </summary>
        </member>
        <member name="P:C1.DataCollection.FilterOperationExpression.Value">
            <summary>
            The filter info value used when applying the filter.
            e.g. when creating a text filter: text.StartsWith("AAA"), the
            Value would be "AAA".
            </summary>
        </member>
        <member name="M:C1.DataCollection.FilterOperationExpression.#ctor(System.String,C1.DataCollection.FilterOperation,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.FilterUnaryExpression"/> class.
            </summary>
            <param name="filterPath">The path of the data item to which the filter will be applied.</param>
            <param name="filterOperation">The filter operation.</param>
            <param name="value">The value to be filtered.</param>
        </member>
        <member name="M:C1.DataCollection.FilterOperationExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="T:C1.DataCollection.FilterTextExpression">
            <summary>
             Describes a text filter expression with match case and match whole word properties.
            </summary>
        </member>
        <member name="P:C1.DataCollection.FilterTextExpression.MatchCase">
            <summary>
            To know MatchCase mode is enable or not
            </summary>
        </member>
        <member name="P:C1.DataCollection.FilterTextExpression.MatchWholeWord">
            <summary>
            To know MatchWholeWord mode is enable or not
            </summary>
        </member>
        <member name="M:C1.DataCollection.FilterTextExpression.#ctor(System.String,C1.DataCollection.FilterOperation,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.FilterTextExpression"/> class and base class.
            </summary>
            <param name="filterPath">Base class property <see cref="T:C1.DataCollection.FilterUnaryExpression"/></param>
            <param name="filterOperation">Base class property <see cref="T:C1.DataCollection.FilterUnaryExpression"/></param>
            <param name="value">Base class property <see cref="T:C1.DataCollection.FilterUnaryExpression"/></param>
            <param name="matchCase">MatchCase mode is enable or not</param>
            <param name="matchWholeWord">MatchWholeWord mode is enable or not </param>
        </member>
        <member name="T:C1.DataCollection.FilterUnaryExpression">
            <summary>
            Describes a concrete filter expression.
            </summary>
        </member>
        <member name="M:C1.DataCollection.FilterUnaryExpression.#ctor(System.String,C1.DataCollection.FilterOperation,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.FilterUnaryExpression`1"/> class.
            </summary>
            <param name="filterPath">The path of the data item to which the filter will be applied.</param>
            <param name="filterOperation">The filter operation.</param>
            <param name="value">The value to be filtered.</param>
        </member>
        <member name="T:C1.DataCollection.FilterUnaryExpression`1">
            <summary>
            Describes a concrete filter expression.
            </summary>
            <typeparam name="T">The type of the data item.</typeparam>
        </member>
        <member name="M:C1.DataCollection.FilterUnaryExpression`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},C1.DataCollection.FilterOperation,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.FilterUnaryExpression`1"/> class.
            </summary>
            <param name="filterPath">The path of the data item to which the filter will be applied.</param>
            <param name="filterOperation">The filter operation.</param>
            <param name="value">The value to be filtered.</param>
        </member>
        <member name="T:C1.DataCollection.FilterPredicateExpression">
            <summary>
            Filter expression which takes a predicate as the filtering function.
            </summary>
            <remarks>
            Because predicates are opaque to the data collection, this kind of filters can not be passed to servers.
            </remarks>
        </member>
        <member name="M:C1.DataCollection.FilterPredicateExpression.#ctor(System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.FilterPredicateExpression"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="P:C1.DataCollection.FilterPredicateExpression.Predicate">
            <summary>
            Gets the predicate which will filter the collection.
            </summary>
        </member>
        <member name="T:C1.DataCollection.FilterCombination">
            <summary>
            Represents the valid filter combinations to create a filter expression.
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterCombination.And">
            <summary>
            An And logical operation is applied to the filters
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterCombination.Or">
            <summary>
            A Or logical operation is applied to the filters
            </summary>
        </member>
        <member name="T:C1.DataCollection.FilterOperation">
            <summary>
            Represents the valid operations.
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.Equal">
            <summary>
            Represents an equal operation
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.NotEqual">
            <summary>
            Represents a not equal operation
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.GreaterThan">
            <summary>
            Represents a greater than operation
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.GreaterThanOrEqual">
            <summary>
            Represents a greater than or equal operation
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.LessThan">
            <summary>
            Represents a less than operation
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.LessThanOrEqual">
            <summary>
            Represents a less than or equal operation
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.EqualText">
            <summary>
            Represents an equal text operation
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.NotEqualText">
            <summary>
            Represents a not equal text operation
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.Contains">
            <summary>
            Represents a contains operation
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.StartsWith">
            <summary>
            Represents a starts with operation
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.EndsWith">
            <summary>
            Represents a ends with operation
            </summary>
        </member>
        <member name="F:C1.DataCollection.FilterOperation.IsOneOf">
            <summary>
            Represents an is one of operation
            </summary>
        </member>
        <member name="T:C1.DataCollection.GroupDescription">
            <summary>
            Describes a group operation.
            </summary>
        </member>
        <member name="M:C1.DataCollection.GroupDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.GroupDescription"/> class.
            </summary>
            <param name="groupPath">The path of the data item to which the group operation will be applied.</param>
        </member>
        <member name="P:C1.DataCollection.GroupDescription.GroupPath">
            <summary>
            Path of the data item to which the group operation will be applied.
            </summary>
        </member>
        <member name="M:C1.DataCollection.GroupDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.DataCollection.GroupDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
        </member>
        <member name="T:C1.DataCollection.IDataCollection`1">
            <summary>
            Abstracts the transformation of a data source into a collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="M:C1.DataCollection.IDataCollection`1.GetItemType">
            <summary>
            Gets the type of the item.
            </summary>
        </member>
        <member name="T:C1.DataCollection.IDataCollectionGroup`2">
            <summary>
            Abstracts a group of <see cref="T:C1.DataCollection.IDataCollection`1"/>.
            </summary>
        </member>
        <member name="P:C1.DataCollection.IDataCollectionGroup`2.Group">
            <summary>
            Gets the key that identifies the group.
            </summary>
        </member>
        <member name="T:C1.DataCollection.ISupportAsyncLoading`1">
            <summary>
            Specifies a calling contract for collection that support asynchronous loading.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportAsyncLoading`1.LoadAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Load the items between the specified indexes.
            </summary>
            <param name="fromIndex">The starting index, if not specified this will be 0.</param>
            <param name="toIndex">The starting index, if not specified this will be Count.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:C1.DataCollection.ISupportAsyncLoading`1.GetLoadedItems">
            <summary>
            Returns all the items that has been loaded so far.
            </summary>
        </member>
        <member name="T:C1.DataCollection.ILoadedItem`1">
            <summary>
            Contains information about the items that has been loaded so far.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:C1.DataCollection.ILoadedItem`1.Index">
            <summary>
            Gets the index of the item.
            </summary>
        </member>
        <member name="P:C1.DataCollection.ILoadedItem`1.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="T:C1.DataCollection.ISupportCreateNewItem">
            <summary>
            Specifies a calling contract for collections that support the creation of its items.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportCreateNewItem.CreateNewItem">
            <summary>
            Creates a new item of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.DataCollection.ISupportEditing">
            <summary>
            Specifies a calling contract for collections that support editing.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportEditing.CanInsert(System.Int32)">
            <summary>
            Determines whether a new item can be inserted in the collection at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index where the items would be inserted.</param>
        </member>
        <member name="M:C1.DataCollection.ISupportEditing.CanRemove(System.Int32)">
            <summary>
            Determines whether the item at the specified <paramref name="index"/> can be removed from the collection.
            </summary>
            <param name="index">The index of the item that would be removed.</param>
        </member>
        <member name="M:C1.DataCollection.ISupportEditing.CanReplace(System.Int32)">
            <summary>
            Determines whether the item at the specified <paramref name="index"/> can be replaced in the collection.
            </summary>
            <param name="index">The index of the item that would be replaced.</param>
        </member>
        <member name="M:C1.DataCollection.ISupportEditing.CanMove(System.Int32,System.Int32)">
            <summary>
            Determines whether the item at <paramref name="fromIndex"/> can be moved to <paramref name="toIndex"/>.
            </summary>
            <param name="fromIndex">The original index.</param>
            <param name="toIndex">The destination index.</param>
        </member>
        <member name="M:C1.DataCollection.ISupportEditing.InsertAsync(System.Int32,System.Object)">
            <summary>
            Inserts the specified <paramref name="item"/> at the specified <paramref name="index"/> in the collection.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:C1.DataCollection.ISupportEditing.RemoveAsync(System.Int32)">
            <summary>
            Removes the item at the specified <paramref name="index"/> from the collection.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:C1.DataCollection.ISupportEditing.ReplaceAsync(System.Int32,System.Object)">
            <summary>
            Replaces the item at the specified <paramref name="index"/> by the specified <paramref name="item"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:C1.DataCollection.ISupportEditing.MoveAsync(System.Int32,System.Int32)">
            <summary>
            Moves an item from the specified <paramref name="fromIndex"/> to <paramref name="toIndex"/>.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
        </member>
        <member name="T:C1.DataCollection.ISupportFiltering">
            <summary>
            Specifies a calling contract for collections that support filtering.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportFiltering.CanFilter(C1.DataCollection.FilterExpression)">
            <summary>
            Returns whether the collection is able to filter the specified <paramref name="filterExpression"/>.
            </summary>
            <param name="filterExpression">The filter expression that determine how the data would be filtered.</param>
        </member>
        <member name="P:C1.DataCollection.ISupportFiltering.FilterExpression">
            <summary>
            Gets the filter expression applied to the data.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportFiltering.FilterAsync(C1.DataCollection.FilterExpression)">
            <summary>
            Filters the data using specified <paramref name="filterExpression"/>.
            </summary>
            <param name="filterExpression">The filter expression applied to the data.</param>
        </member>
        <member name="E:C1.DataCollection.ISupportFiltering.FilterChanged">
            <summary>
            Raised after a filter operation was performed.
            </summary>
        </member>
        <member name="T:C1.DataCollection.ISupportGrouping">
            <summary>
            Specifies a calling contract for collections that support grouping.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportGrouping.CanGroup(C1.DataCollection.GroupDescription[])">
            <summary>
            Returns whether the collection is able to group the specified group descriptions.
            </summary>
            <param name="groupDescriptions">The group descriptions that determine how the data would be grouped.</param>
        </member>
        <member name="P:C1.DataCollection.ISupportGrouping.GroupDescriptions">
            <summary>
            Gets the group descriptions applied to the data.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportGrouping.GroupAsync(C1.DataCollection.GroupDescription[])">
            <summary>
            Groups the collection according to the specified group descriptions.
            </summary>
            <param name="groupDescriptions">The group descriptions that determine how the data will be grouped.</param>
        </member>
        <member name="P:C1.DataCollection.ISupportGrouping.IsPlain">
            <summary>
            Gets whether the group items will be inline with the data items or the items will be the first level of group items.
            </summary>
        </member>
        <member name="E:C1.DataCollection.ISupportGrouping.GroupChanged">
            <summary>
            Raised after a grouping operation was performed.
            </summary>
        </member>
        <member name="T:C1.DataCollection.ISupportIncrementalLoading">
            <summary>
            Specifies a calling contract for collections that support incremental loading.
            </summary>
        </member>
        <member name="P:C1.DataCollection.ISupportIncrementalLoading.HasMoreItems">
            <summary>
            Gets a value that indicates whether more items can be loaded.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportIncrementalLoading.LoadMoreItemsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Loads more items.
            </summary>
            <param name="count">Specifies the desired number of items to be loaded.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:C1.DataCollection.ISupportPaging">
            <summary>
            Specifies a calling contract for collections that support paging.
            </summary>
        </member>
        <member name="P:C1.DataCollection.ISupportPaging.PageSize">
            <summary>
            Gets or sets the maximum number of items per page.
            </summary>
        </member>
        <member name="P:C1.DataCollection.ISupportPaging.CurrentPage">
            <summary>
            Gets the current page number.
            </summary>
        </member>
        <member name="P:C1.DataCollection.ISupportPaging.TotalCount">
            <summary>
            Gets the total number of items in the collection.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportPaging.MoveToPageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Moves to the page <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">The index of the page.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="E:C1.DataCollection.ISupportPaging.PageChanged">
            <summary>
            Occurs after the current page changed.
            </summary>
        </member>
        <member name="T:C1.DataCollection.ISupportRefreshing">
            <summary>
            Specifies a calling contract for collections that support refreshing.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportRefreshing.CanRefresh">
            <summary>
            Determines whether the collection can be refreshed.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportRefreshing.RefreshAsync(System.Threading.CancellationToken)">
            <summary>
            Called when the data needs to be refreshed.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:C1.DataCollection.ISupportSorting">
            <summary>
            Specifies a calling contract for collections that support sorting.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportSorting.CanSort(C1.DataCollection.SortDescription[])">
            <summary>
            Returns whether the collection is able to sort the specified <paramref name="sortDescriptions"/>.
            </summary>
            <param name="sortDescriptions">The sort descriptions to be checked whether the collection can be sorted.</param>
        </member>
        <member name="P:C1.DataCollection.ISupportSorting.SortDescriptions">
            <summary>
            Gets the sort descriptions applied to the data.
            </summary>
        </member>
        <member name="M:C1.DataCollection.ISupportSorting.SortAsync(C1.DataCollection.SortDescription[])">
            <summary>
            Sorts the collection according to the specified <paramref name="sortDescriptions"/>.
            </summary>
            <param name="sortDescriptions">The sort descriptions that determine how the data will be sort.</param>
        </member>
        <member name="E:C1.DataCollection.ISupportSorting.SortChanged">
            <summary>
            Raised after a sort operation was performed.
            </summary>
        </member>
        <member name="T:C1.DataCollection.ISupportSource">
            <summary>
            Specifies a calling contract for collections whose data comes from another source.
            </summary>
        </member>
        <member name="P:C1.DataCollection.ISupportSource.Source">
            <summary>
            Gets the data source of this collection.
            </summary>
        </member>
        <member name="T:C1.DataCollection.ISupportVirtualization">
            <summary>
            Specified whether the collection virtualizes the data.
            </summary>
        </member>
        <member name="P:C1.DataCollection.ISupportVirtualization.IsVirtualizing">
            <summary>
            Gets whether the collection is virtualizing its data.
            </summary>
            <remarks>This is important for data consumers to know whether it is viable to iterate the collection to get all the items.</remarks>
        </member>
        <member name="T:C1.DataCollection.SortDescription">
            <summary>
            Describes a sort operation.
            </summary>
        </member>
        <member name="M:C1.DataCollection.SortDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.SortDescription"/> class.
            </summary>
            <param name="sortPath">The path of the data item to which the sort operation will be applied.</param>
        </member>
        <member name="M:C1.DataCollection.SortDescription.#ctor(System.String,C1.DataCollection.SortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.DataCollection.SortDescription"/> class.
            </summary>
            <param name="sortPath">The path of the data item to which the sort operation will be applied.</param>
            <param name="direction">The direction of the sort operation.</param>
        </member>
        <member name="P:C1.DataCollection.SortDescription.SortPath">
            <summary>
            Path of the data item to which the sort operation will be applied.
            </summary>
        </member>
        <member name="P:C1.DataCollection.SortDescription.Direction">
            <summary>
            Direction of the sort operation.
            </summary>
        </member>
        <member name="M:C1.DataCollection.SortDescription.GetSortExpression``1">
            <summary>
            Gets the sorting expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.DataCollection.SortDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:C1.DataCollection.SortDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
        </member>
        <member name="T:C1.DataCollection.SortDirection">
            <summary>
            Direction of the sort operation.
            </summary>
        </member>
        <member name="F:C1.DataCollection.SortDirection.Ascending">
            <summary>
            The sort will be performed in ascending mode.
            </summary>
        </member>
        <member name="F:C1.DataCollection.SortDirection.Descending">
            <summary>
            The sort will be performed in descending mode.
            </summary>
        </member>
        <member name="T:C1.Core.AsyncEventArgs">
            <summary>
            Provides event data for asynchronous events.
            </summary>
        </member>
        <member name="P:C1.Core.AsyncEventArgs.Awaiter">
            <summary>
            Gets the deferrals awaiter.
            </summary>
        </member>
        <member name="M:C1.Core.AsyncEventArgs.GetDeferral">
            <summary>
            Gets the deferral.
            </summary>
            <remarks>
            The event won't finish until all the deferrals call the comlete method.
            </remarks>
        </member>
        <member name="M:C1.Core.AsyncEventArgs.WaitDeferralsAsync">
            <summary>
            Waits until all the deferrals are complete.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Core.AsyncEventArgsDeferralsAwaiter">
            <summary>
            Deferrals awaiter used to wait for the deferrals of an async event.
            </summary>
        </member>
        <member name="M:C1.Core.AsyncEventArgsDeferralsAwaiter.GetDeferral">
            <summary>
            Gets the deferral.
            </summary>
            <remarks>
            The event won't finish until all the deferrals call the comlete method.
            </remarks>
        </member>
        <member name="M:C1.Core.AsyncEventArgsDeferralsAwaiter.WaitDeferralsAsync">
            <summary>
            Waits until all the deferrals are complete.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Core.AsyncEventArgsDeferral">
            <summary>
            Deferral used to block the event until <see cref="M:C1.Core.AsyncEventArgsDeferral.Complete"/> method is called. 
            </summary>
        </member>
        <member name="M:C1.Core.AsyncEventArgsDeferral.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Core.AsyncEventArgsDeferral"/> class.
            </summary>
        </member>
        <member name="M:C1.Core.AsyncEventArgsDeferral.Complete">
            <summary>
            Notifies the event the handler is ready to continue.
            </summary>
        </member>
        <member name="M:C1.Core.ObjectEx.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of a property or property path of the specified object.
            </summary>
            <remarks>
            This extension DON'T evaluate ICustomTypeDescriptor interface. 
            Use generic extension with the same name if you are evaluating the path 
            of a DataTable or any object that implements ICustomTypeDescriptor.
            </remarks>
            <param name="target">The target object.</param>
            <param name="path">The name of the property or the property path.</param>
            <returns>The value contained in the property</returns>
        </member>
        <member name="M:C1.Core.ObjectEx.SetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Sets the value of a property or property path of the specified object.
            </summary>
            <typeparam name="T">Type of the property to set.</typeparam>
            <param name="target">Object that contains the property.</param>
            <param name="path">Name or path of the property that contains the value.</param>
            <param name="value">New value for the property.</param>
        </member>
        <member name="M:C1.Core.StringEx.SplitCamel(System.String,System.Boolean)">
            <summary>
            Insert spaces between words identified by the camel nomenclature.
            </summary>
            <param name="s">The original string.</param>
            <param name="capitalizeFirst">When set to true the resulting string will have its first word capitalized despite the original string capitalization.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Core.TypeEx">
            <summary>
            The <see cref="T:C1.Core.TypeEx"/> class provides useful extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:C1.Core.TypeEx.New``1(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.Core.TypeEx.New``2(System.Type,``1)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="P1">The type of the <paramref name="param1"/>.</typeparam>
            <param name="type">The type.</param>
            <param name="param1">The first parameter.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.Core.TypeEx.New(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.Core.TypeEx.GetDefaultPublicCtor(System.Type)">
            <summary>
            Returns default public instance parameter-less constructor for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default constructor for the specified type if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Core.TypeEx.New``1(System.Type,System.Action{``0})">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="initializers">The initializers.</param>
            <returns>A new instance of type T</returns>
        </member>
        <member name="M:C1.Core.TypeEx.GetNonNullableType(System.Type)">
            <summary>
            Returns the underlying type of a nullable type:
            e.g. if Type = double?, then returns double.
            </summary>
            <param name="type">Type.</param>
            <returns>The underlying type.</returns>
        </member>
        <member name="M:C1.Core.TypeEx.IsNullableType(System.Type)">
            <summary>
            Returns true if the type is a nullable type.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is nullable.</returns>
        </member>
        <member name="M:C1.Core.TypeEx.IsNumeric(System.Type)">
            <summary>
            Returns true if the type is any of the numeric data types:
            double, float, int, uint, long, ulong, short, ushort, sbyte, byte and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is numeric.</returns>
        </member>
        <member name="M:C1.Core.TypeEx.IsNumericIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the integral numeric data types:
            int, uint, long, ulong, short, ushort, sbyte and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an integral numeric.</returns>
        </member>
        <member name="M:C1.Core.TypeEx.IsNumericIntegralSigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral signed numeric data types:
            int, long, short and sbyte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a signed integral numeric.</returns>
        </member>
        <member name="M:C1.Core.TypeEx.IsNumericIntegralUnsigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral unsigned numeric data types:
            uint, ulong, ushort and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an unsigned integral numeric.</returns>
        </member>
        <member name="M:C1.Core.TypeEx.IsNumericNonIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the numeric non-integral data types:
            double, float and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a non-integral numeric.</returns>
        </member>
        <member name="M:C1.Core.TypeEx.GetEnumValues``1(System.Type)">
            <summary>
            Returns the values of an Enum type (Type.IsEnum == true).
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="enumType">Enum type.</param>
            <returns>The list of values for that enum type.</returns>
        </member>
    </members>
</doc>
